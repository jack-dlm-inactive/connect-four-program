// name: 		Program_7
// author:		Jack de la Motte
// date: 		january 26th
// description:	an interactive, two player connect four game

import java.util.Scanner;

class Main
{
	// declaring variables for all methods
  	final static int HEIGHT = 6;
  	final static int WIDTH = 7;
  	static String[][] grid = new String[HEIGHT][WIDTH];
	static int turn = 1;
	static int column = 0;
	static int row = 0;
	static int playerTurn = 1;
	static boolean tieGame = false;
	static boolean columnLocation = false;
	static boolean winner = false;
	static String token;
	
	// Purpose: runs algorithm 
	// Author: Jack de la Motte
	// Args: none
	// Returns: none
	// Outputs: prints whose turn it is
	public static void main(String[] args)
	{
		
		gameRules();
		
		
		for (row = 0; row < 6; row++)
	    {
	        for (column = 0; column < 7; column++)
	        {
	            grid[row][column] = " ";
	        }
	    }
		
		while ((winner == false) && (tieGame == false))
		{
			
			//Loop to receive coordinate input and check if spot is open
			System.out.println("It's player " + playerTurn + "'s turn!");
			if (turn < 43)
			{
	        	while (columnLocation == false)
				{
					column = userInputColumn();
					row = determineRow();
					columnLocation = checkColumn();
				}
			}
			
			//Places mark where Player 1 wants it
			if (playerTurn == 1)
			{
			    grid[row][column] = "x";
			}
			
			//Places mark where Player 2 wants it
			if (playerTurn == 2)
			{
			    grid[row][column] = "o";
			}

			displayGame();
			
			//Checks whether not board is full and whether or not there is a tie game
			tieGame = boardFull();
		 	if (tieGame == true)
			{
				System.out.println("The game ended in a tie!");
	    	}
			
			if (playerTurn == 1)
			{
				playerTurn = 2;
			}
			else
			{
				playerTurn = 1;
			}
			
			turn++;
			token = "x";
			checkBoard();
			token = "o";
			checkBoard();
			columnLocation = false;
		}
	}

	// Purpose: displays game 
	// Author: Jack de la Motte
	// Args: none
	// Returns: none
	// Outputs: prints game rules
	public static void gameRules()
	{
		System.out.println();
		System.out.println("---------------------------------------------------------");
		System.out.println("| Welcome to Connect Four!                              |");
		System.out.println("| Player 1 is x and player 2 is o.                      |");
		System.out.println("| take turns dropping tokens in any column on the board.|");
		System.out.println("| The first person to 4 in a row wins!                  |");
		System.out.println("| 4 in a row can be horizontal, vertical, or diagonal.  |");
		System.out.println("| Good luck!                                            |");
		System.out.println("---------------------------------------------------------");
		System.out.println();
	}
	
	// Purpose: asks user what column they want to place a token in
	// Author: Jack de la Motte
	// Args: none
	// Returns: column
	// Outputs: prompts user for column
	public static int userInputColumn()
	{
  		Scanner sc = new Scanner(System.in);
  		try 
  		{
	  		//System.out.println();
	  		System.out.println("Which column do you want to put your piece in? (0-6)");
	  		System.out.println();
	  	
	  		column = sc.nextInt(); // sets column to users inputted number
	 	
	
	  		while(column > 6 || column < 0) // accounts for out of bounds integers
	  		{
	  				System.out.println("That answer is not valid. Please enter a number 0 - 6.");
	  				column = sc.nextInt(); // retakes input
	  		}
  		}
  		catch (Exception e)
  		{
  			System.out.println("Error: invalid input, restart the program and enter an integer 0 - 6.");
  			System.out.println("");
  			
  		}
  		return column;
	}
  
  	// Purpose: determines row token should be placed in 
	// Author: Jack de la Motte
	// Args: none
	// Returns: row
	// Outputs: none
	public static int determineRow()
	{
	   boolean flag = false; 
	   row = 5; // starts at bottom row (5)
	  	
	  	while(flag == false)
	  	{
	  		if(grid[row][column] != "x" || grid[row][column] != "o")  // does not equal an X or O
	  		{
	  			flag = true;
	  			if(grid[row][column] == "x" || grid[row][column] == "o")
	  			{
	  	      		row = row-1;
	  	      		if(grid[row][column] == "x" || grid[row][column] == "o")
	  	      		{
	  	        		row = row-1;
	  	        		if(grid[row][column] == "x" || grid[row][column] == "o")
	  	        		{
	  	          			row = row-1;
	  	          			if(grid[row][column] == "x" || grid[row][column] == "o")
	  	        			{
	  	            			row = row-1;
	  	             			if(grid[row][column] == "x" || grid[row][column] == "o")
	  	             			{
	  	               				row = row-1;
	  	               				if(grid[row][column] == "x" || grid[row][column] == "o")
	  	               				{
	  	                 				return -1;
	  	               				}
	  	             			}
	  	          			}
	  	    			}
	  	      		}
	  	      
	  			}
	  			return row;
	  		}
	  		else
	  		{
	  			flag = false; 
	  			row = row-1;
	  		}
	  	
	    }
	    return row;
	}
  
  	// Purpose: checks if column is full or open
	// Author: Jack de la Motte
	// Args: none
	// Returns: true or false if the column is open or not
	// Outputs: if column is full
	public static boolean checkColumn()
	{	
    	if (row < 0)
    	{
    		System.out.println();
    		System.out.println("This column is full.");
    		System.out.println("Please choose a column with space to drop your token in!");
    		System.out.println();
    		return false;
    	}
    	else
    	{
    		return true;
    	}
	}
	
	// Purpose: displays board and tokens
	// Author: Jack de la Motte
	// Args: none
	// Returns: none
	// Outputs: the board
	public static void displayGame()
	{
		int column;
		int row;
			
		System.out.println();
		System.out.println("                     columns:");
		System.out.println(" 0      1       2       3       4       5       6       ");
		
		    for (row = 0; row < 6; row++)
		    {
		        for (column = 0; column < 7; column++)
		        {
		            System.out.print(grid[row][column]);
		            if (column < 6)
		            {
		              System.out.print("   |   ");
		            }
		        }
		        System.out.println();
		        
		        if (row < 5)
		        {
		        System.out.println("----|-------|-------|-------|-------|-------|-----");
		        }
		    }
		   System.out.println(); 
		   System.out.println();
	}
	
	// Purpose: checks if board is full
	// Author: Jack de la Motte
	// Args: none
	// Returns: if board is full or not
	// Outputs: none
	public static boolean boardFull()
	{
		if (winner==false && turn==43)
		{
			return true;
		}
		
		else
		{
			return false;
		}
	}
	
	// Purpose: checks for a horizontal win
	// Author: Jack de la Motte
	// Args: none
	// Returns: whether horizontal win is true or not
	// Outputs: none
	public static boolean checkHorizontal()
	{
        //creates boolean to act as flag
        boolean noWin = true;

        //creates counter
        int counter = 0;
        while(noWin)
        {

            //goes through board horizontally
            for(int i = 0; HEIGHT > i; i++)
            {
                for(int j = 0; WIDTH > j; j++)
                {
                    if(grid[i][j] == token)
                    { //if it finds an X, add 1 to counter
                        counter++;
                    }
                    else
                    {
                        counter = 0; // if next piece is not an X, set counter to 0
                    }
                    if(counter >= 4)
                    {
                        noWin = false;
                    }
                }
            }
            break;
        }
        return noWin;
	}
   	
   	// Purpose: checks for a vertical win
	// Author: Jack de la Motte
	// Args: none
	// Returns: whether vertical win is true or not
	// Outputs: none
	public static boolean checkVertical()
	{
        //creates boolean to act as flag
        boolean noWin = true;

        //creates counter
        int counter = 0;
        while(noWin)
        {
            //goes through board horizontally
            for(int j = 0; WIDTH > j; j++)
            {
                for(int i = 0; HEIGHT > i; i++)
                {
                    if(grid[i][j] == token)
                    { //if it finds an X, add 1 to counter
                        counter++;
                    }
                    else
                    {
                        counter = 0; // if next piece is not an X, set counter to 0
                    }
                    if(counter >= 4)
                    {
                        noWin = false;
                    }
                }
            }
            break;
        }
        return noWin;
   }
  
  	// Purpose: checks for a falling left diagonal win
	// Author: Jack de la Motte
	// Args: none
	// Returns: whether falling left diagonal win is true or not
	// Outputs: none
   public static boolean checkMajorDiagonal()
   {
   	int counter = 0;
  
  	for (int column = 0; column < 4; column++)
  	{
    	counter = 0;
    	for (int row = 5; row > 2; row--)  
    	{
      		counter = 0;
	      	if (grid[row][column] == token)
	      	{
	      		counter++;
	        	if (grid[row-1][column+1] == token)
	        	{
	          		counter++;
	          		if (grid[row-2][column+2] == token)
	          		{
	            		counter++;
            			if (grid[row-3][column+3] == token)
            			{
              				counter++;
            			}
            			else
            			{
              				counter = 0;
            			}
          			}
          			else
          			{
            			counter = 0;
          			}
        		}
        		else
        		{
          			counter = 0;
        		}
      		}
      		else
      		{
        		counter = 0;
      		}
      		
      		if (counter >= 4)
      		{
    			return false;
      		}
      		else
      		{
        		counter= 0;
      		}
    	}
  	}
  	return true;
   }
   	
    
    // Purpose: checks for a falling right diagonal win
	// Author: Jack de la Motte
	// Args: none
	// Returns: whether falling right diagonal win is true or not
	// Outputs: none
	public static boolean checkMinorDiagonal()
	{
		boolean noWin = true;
   		int counter = 0;
  
	  	for (int column = 0; column < 5; column++)
	  	{
	    	counter = 0;
			for (int row = 5; row > 2; row--)  
	    	{
	      		counter = 0;
	      		if (grid[row][column] == token)
	    		{
		        	counter++;
		        	if (grid[row-1][column+1] == token)
		        	{
		          		counter++;
		          		if (grid[row-2][column+2] == token)
		          		{
		            		counter++;
		            		if (grid[row-3][column+3] == token)
		            		{
		              			counter++;
		            		}
		          		}
		        	}
		      	}
		      	if (counter >= 4)
		      	{
		        	noWin = false;
		      	}
		      	else
		      	{
		        	counter = 0;
		      	}
			 }
	  	}
	  	return noWin;
	}
	
	// Purpose: calls all check methods and determines if any are true
	// Author: Jack de la Motte
	// Args: none
	// Returns: none
	// Outputs: if game is over and who won
	public static void checkBoard()
	{
   		if(!checkHorizontal() || !checkVertical() || !checkMajorDiagonal() || !checkMinorDiagonal())
   		{	
   			if(token == "x")
   			{
   				System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
   				System.out.println("!!! Player 1 won the game!!!");
   				System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
   				System.exit(0);
   			}
   			else if(token == "o")
   			{
   				System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
   				System.out.println("!!! Player 2 won the game!!!");
   				System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
   				System.exit(0);
   			}
   			else
   			{
   				
   			}
   		}
   		else
   		
   		{
   
   		}
   	}
}
